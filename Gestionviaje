-- creacion de modelo 

drop database gestionviaje;
create database gestionviaje;
use gestionviaje;
-- Creaccion de objetos 
create table cliente (
	Id_cliente int not null auto_increment,
	nombre varchar(50) not null,
	apellido varchar (50) not null,
    direccion varchar(100) not null,
    telefono varchar(20)not null,
    correoElectronico varchar(30)not null,
    primary key (Id_cliente)
);
create table destinos(
	Id_destino int not null auto_increment,
    nombreDestino varchar(100) not null,
    descripcion varchar (200) not null,
	primary key (Id_destino)
);
create table empleados(
	Id_empleados int not null auto_increment,
    nombre varchar(50) not null,
    apellido varchar(50) not null,
    salario varchar (50) not null,
    fechanacimiento date not null,
	primary key (Id_empleados)
);

create table reserva (
	Id_reserva int not null auto_increment,
    Id_paquete int not null,
    Id_cliente int not null ,
    Id_empleado int not null,
    fechareserva date,
    numeroTelePersona varchar(50),
    estadoreserva varchar (50),
    primary key (Id_reserva)
);
create table pagos(
	Id_pago int not null auto_increment, 
    Id_reserva int not null,
    metodoPago varchar(50),
    fechaPago date,
    primary key (Id_pago)
);

create table paqueteviaje(
	Id_paquete int not null auto_increment,
    Id_destino int not null,
    nombrepaquete varchar(100),
    duracion int not null,
    precio int not null,
    fechaInicio date,
    fechaFin date,
    primary key (Id_paquete)
);
-- foreign key
alter table paqueteviaje
add foreign key (Id_destino) references destinos(Id_destino);
alter table reserva
add foreign key (Id_paquete) references paqueteviaje(Id_paquete),
add foreign key (Id_cliente) references cliente(Id_cliente);
alter table pagos 
add foreign key (Id_reserva) references reserva(Id_reserva);

alter table reserva
add foreign key (Id_empleado) references empleados(Id_empleados);

DELIMITER $$
CREATE TRIGGER before_insert_reserva
BEFORE INSERT ON reserva
FOR EACH ROW
BEGIN
    IF NEW.fechareserva < CURDATE() THEN
        SET NEW.estadoreserva = 'Expirada';
    ELSE
        SET NEW.estadoreserva = 'Pendiente';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER after_insert_pagos
AFTER INSERT ON pagos
FOR EACH ROW
BEGIN
    UPDATE reserva
    SET estadoreserva = 'Pagada'
    WHERE Id_reserva = NEW.Id_reserva;
END$$
DELIMITER ;


DELIMITER $$
CREATE TRIGGER before_update_reserva
BEFORE UPDATE ON reserva
FOR EACH ROW
BEGIN
    IF NEW.fechareserva < CURDATE() THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'La fecha de reserva no puede ser anterior a la fecha actual';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION CalcularDuracionPaquete(fechaInicio DATE, fechaFin DATE) RETURNS INT
DETERMINISTIC
BEGIN
    DECLARE duracion INT;
    SET duracion = DATEDIFF(fechaFin, fechaInicio) + 1;
    RETURN duracion;
END
$$
DELIMITER ;


CREATE VIEW DetallesReservasActivas AS
SELECT r.Id_reserva, r.fechareserva, r.numeroTelePersona, r.estadoreserva,
       c.nombre AS nombre_cliente, c.apellido AS apellido_cliente,
       p.nombrepaquete, p.duracion, p.precio
FROM reserva r
INNER JOIN cliente c ON r.Id_cliente = c.Id_cliente
INNER JOIN paqueteviaje p ON r.Id_paquete = p.Id_paquete
WHERE r.estadoreserva = 'Pendiente';


CREATE VIEW ReservasExpiradas AS
SELECT r.Id_reserva, r.fechareserva, r.numeroTelePersona, r.estadoreserva,
       c.nombre AS nombre_cliente, c.apellido AS apellido_cliente,
       p.nombrepaquete, p.duracion, p.precio
FROM reserva r
INNER JOIN cliente c ON r.Id_cliente = c.Id_cliente
INNER JOIN paqueteviaje p ON r.Id_paquete = p.Id_paquete
WHERE r.estadoreserva = 'Expirada';

CREATE VIEW PagosPendientes AS
SELECT r.Id_reserva, r.fechareserva, r.numeroTelePersona, r.estadoreserva,
       c.nombre AS nombre_cliente, c.apellido AS apellido_cliente,
       p.nombrepaquete, p.duracion, p.precio
FROM reserva r
INNER JOIN cliente c ON r.Id_cliente = c.Id_cliente
INNER JOIN paqueteviaje p ON r.Id_paquete = p.Id_paquete
WHERE r.estadoreserva = 'Pendiente';



